generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../ERD.svg"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model cart {
  cartID     String   @id
  customerID String
  productID  String
  qty        Int
  total      Float
  customer   customer @relation(fields: [customerID], references: [customerID], map: "Cart_customerID_fkey")
  product    product  @relation(fields: [productID], references: [productID], map: "Cart_productID_fkey")

  @@index([customerID], map: "Cart_customerID_fkey")
  @@index([productID], map: "Cart_productID_fkey")
}

model category {
  categoryID   String    @id
  categoryName String
  product      product[]
}

model customer {
  customerID  String  @id
  firstname   String
  lastname    String
  email       String  @unique(map: "Customer_email_key")
  password    String
  phonenumber String
  address     String
  cart        cart[]
  order       order[]
}

model discount {
  discountID    String @id
  discountType  String
  discountValue Float
  description   String
}

model order {
  orderID     String        @id
  customerID  String
  orderdate   DateTime
  totalAmount Float
  status      String
  address     String
  customer    customer      @relation(fields: [customerID], references: [customerID], map: "Order_customerID_fkey")
  orderdetail orderdetail[]
  payment     payment?

  @@index([customerID], map: "Order_customerID_fkey")
}

model orderdetail {
  orderDetailID String  @id
  orderID       String
  productID     String
  quantity      Int
  price         Float
  order         order   @relation(fields: [orderID], references: [orderID], map: "OrderDetail_orderID_fkey")
  product       product @relation(fields: [productID], references: [productID], map: "OrderDetail_productID_fkey")

  @@index([orderID], map: "OrderDetail_orderID_fkey")
  @@index([productID], map: "OrderDetail_productID_fkey")
}

model payment {
  paymentID     String   @id
  orderID       String   @unique(map: "Payment_orderID_key")
  paymentDate   DateTime
  slip          String?
  amount        Float
  paymentMethod String
  order         order    @relation(fields: [orderID], references: [orderID], map: "Payment_orderID_fkey")
}

model product {
  productID       String            @id
  productName     String
  description     String?
  productImage    String?
  price           Float
  stockQuantity   Int
  categoryID      String
  cart            cart[]
  orderdetail     orderdetail[]
  category        category          @relation(fields: [categoryID], references: [categoryID], map: "Product_categoryID_fkey")
  productdiscount productdiscount[]

  @@index([categoryID], map: "Product_categoryID_fkey")
}

model productdiscount {
  productDiscountID String   @id
  discountID        String
  productID         String
  discountType      String
  discountValue     Float
  startDate         DateTime
  endDate           DateTime
  isActive          Boolean
  product           product  @relation(fields: [productID], references: [productID], map: "ProductDiscount_productID_fkey")

  @@index([productID], map: "ProductDiscount_productID_fkey")
}

model user {
  userID    String   @id
  username  String   @unique(map: "User_username_key")
  email     String   @unique(map: "User_email_key")
  password  String
  name      String?
  role      String   @default("admin")
  createdAt DateTime @default(now())
  updatedAt DateTime
}
